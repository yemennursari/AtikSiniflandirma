# -*- coding: utf-8 -*-
"""Atık Sınıflandırma.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rBa41Gat_F5UMwSdPbKD6uCni3iqCaLq
"""

import numpy as np
import os
import random
import matplotlib.pyplot as plt

from keras.models import Sequential
from keras.layers.core import Dense,Dropout,Flatten
from keras.preprocessing.image import ImageDataGenerator
from google.colab import drive
drive.mount("/content/drive")
from numpy import expand_dims
from keras.preprocessing.image import load_img


train_path='./drive/MyDrive/Derin Öğrenme/Dataset/train'
test_path='./drive/MyDrive/Derin Öğrenme/Dataset/test'
train_datagen = ImageDataGenerator(
    rescale=1./255,
    zoom_range=0.2,
    horizontal_flip=True,
    vertical_flip=True,
    validation_split=0.1 
)
val_datagen=ImageDataGenerator(rescale=1./255,validation_split=0.1)
test_datagen=ImageDataGenerator(rescale=1./255)

train_generator=train_datagen.flow_from_directory(
    train_path,
    target_size=(100,100),
    shuffle=True,
    class_mode='categorical',
    batch_size=8,
    subset='training'
)
val_generator=val_datagen.flow_from_directory(
    train_path,
    target_size=(100,100),
    shuffle=False,
    class_mode='categorical',
    batch_size=8,
    subset='validation'
)
test_generator=test_datagen.flow_from_directory(
    test_path,
    target_size=(100,100),
    shuffle=False,
    class_mode='categorical',
    batch_size=1,
)


model=Sequential()
model.add(Flatten(input_shape=(100,100,3)))
model.add(Dense(700,activation='relu'))
model.add(Dense(700,activation='relu'))
model.add(Dense(6,activation='softmax')) 
model.compile(loss="categorical_crossentropy",optimizer="Adam",metrics=['accuracy'])
model.summary()

history=model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples//8,
    validation_data=val_generator,
    epochs=10,
    validation_steps=val_generator.samples//8

)


tahmin=model.predict(test_generator,steps=test_generator.samples//1)
tahmin_sinif=np.argmax(tahmin,axis=1)
dogru_siniflar=test_generator.classes
from sklearn.metrics import confusion_matrix,classification_report
print('Confusion Matrix')
cm=confusion_matrix(dogru_siniflar,tahmin_sinif)
print(classification_report(dogru_siniflar,tahmin_sinif))


plt.subplot(211) 
plt.title("Accuracy")
plt.plot(history.history["accuracy"],color='r',label='train')
plt.plot(history.history["val_accuracy"],color='b',label='validation')
plt.legend(loc='best')

plt.subplot(212)
plt.title("Loss")
plt.plot(history.history["loss"],color='r',label='train')
plt.plot(history.history["val_loss"],color='b',label='validation')
plt.legend(loc='best')
plt.tight_layout()
plt.show()

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(dogru_siniflar,tahmin_sinif)
print(cm)
acc=(cm[0][0]+cm[1][1])/len(dogru_siniflar)
print("Acc:",acc)
sen=cm[0][0]/(cm[0][0]+cm[1][0])
print("Sen:",sen)
pre=cm[0][0]/(cm[0][0]+cm[0][1])
print("Pre:",pre)
f1=2*((pre*sen)/(pre+sen))
print("F1:",f1)